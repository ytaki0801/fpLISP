((lambda (eval)
   (eval (quote
     (((lambda (u) (u u))
       (lambda (u)
         (lambda (n a b)
           (if (lt n (quote 0)) nil
               (cons a ((u u) (- n (quote 1)) b (+ a b)))))))
      (quote 21) (quote 0) (quote 1))
     ) nil))
 (lambda (e a)
   ((lambda (fold)
      (((lambda (u) (u u)) (lambda (u) (lambda (e a)
          (if (atom e)
              (fold (lambda (c r) (if (eq (car c) e) (cdr c) r)) nil a)
          (if (eq (car e) (quote quote)) (car (cdr e))
          (if (eq (car e) (quote if))
              (if ((u u) (car (cdr e)) a)
                  ((u u) (car (cdr (cdr e))) a)
                  ((u u) (car (cdr (cdr (cdr e)))) a))
          (if (eq (car e) (quote lambda)) (fold cons ((lambda x x) a) e)
              ((lambda (f v)
                 (if (atom f)
                     (if (eq f (quote cons)) (cons (car v) (car (cdr v)))
                     (if (eq f (quote car))  (car (car v))
                     (if (eq f (quote cdr))  (cdr (car v))
                     (if (eq f (quote eq))   (eq (car v) (car (cdr v)))
                     (if (eq f (quote atom)) (atom (car v))
                     (if (eq f (quote +))    (+ (car v) (car (cdr v)))
                     (if (eq f (quote -))    (- (car v) (car (cdr v)))
                     (if (eq f (quote *))    (* (car v) (car (cdr v)))
                     (if (eq f (quote /))    (/ (car v) (car (cdr v)))
                     (if (eq f (quote %))    (% (car v) (car (cdr v)))
                     (if (eq f (quote lt))   (lt (car v) (car (cdr v)))
                     nil)))))))))))
                 (if (eq (car f) (quote lambda))
                     ((u u) (car (cdr (cdr f)))
                            (fold cons (car (cdr (cdr (cdr f))))
                              ((lambda (lvars)
                                 (if (atom lvars) ((lambda x x) (cons lvars v))
                                     (fold (lambda (x y r) (cons (cons x y) r))
                                       nil lvars v)))
                               (car (cdr f))))) nil)))
               ((u u) (car e) a)
               (fold (lambda (x r) (cons ((u u) x a) r)) nil (cdr e))))))))))
       e (fold cons a
           (quote ((cons . cons) (car . car) (cdr . cdr)
                   (+ . +) (- . -) (* . *) (/ . /) (% . %)
                   (eq . eq) (atom . atom) (lt . lt) (t . t) (nil . nil))))))
    ((lambda (u) (u u)) (lambda (u) (lambda fv
       ((lambda (f i a b)
          (if (eq a nil) i
          (if (eq b nil) (f (car a) ((u u) f i (cdr a)))
              (f (car a) (car (car b)) ((u u) f i (cdr a) (cdr (car b)))))))
        (car fv) (car (cdr fv)) (car (cdr (cdr fv)))
        (cdr (cdr (cdr fv))))))))))

