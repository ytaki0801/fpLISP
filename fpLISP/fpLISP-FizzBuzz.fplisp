((lambda (append map eval e a)
   (eval e
     (quote ((cons . cons) (car . car) (cdr . cdr) (eq . eq) (atom . atom)
             (+ . +) (- . -) (* . *) (/ . /) (% . %) (lt . lt)
             (t . t) (nil . nil)))
     append map))
 ((lambda (u) (u u))
  (lambda (u)
    (lambda (a b)
      (if (eq a nil) b
          (cons (car a) ((u u) (cdr a) b))))))
 ((lambda (u) (u u))
  (lambda (u)
    (lambda fv
      ((lambda (f a b)
        (if (eq a nil) nil
        (if (eq b nil)
            (cons (f (car a)) ((u u) f (cdr a)))
            (cons (f (car a) (car (car b)))
                  ((u u) f (cdr a) (cdr (car b)))))))
       (car fv) (car (cdr fv)) (cdr (cdr fv))))))
 ((lambda (u) (u u))
  (lambda (u)
    (lambda (e a append map)
      (if (atom e)
          (((lambda (u) (u u))
            (lambda (u)
              (lambda (k v)
                (if (eq v nil) nil
                (if (eq k (car (car v))) (cdr (car v))
                    ((u u) k (cdr v)))))))
           e a)
      (if (eq (car e) (quote quote)) (car (cdr e))
      (if (eq (car e) (quote if))
          (if ((u u) (car (cdr e)) a append map)
              ((u u) (car (cdr (cdr e))) a append map)
              ((u u) (car (cdr (cdr (cdr e)))) a append map))
      (if (eq (car e) (quote lambda)) (append e ((lambda x x) a))
          ((lambda (f v)
             (if (atom f)
                 (if (eq f (quote cons)) (cons (car v) (car (cdr v)))
                 (if (eq f (quote car))  (car (car v))
                 (if (eq f (quote cdr))  (cdr (car v))
                 (if (eq f (quote eq))   (eq (car v) (car (cdr v)))
                 (if (eq f (quote atom)) (atom (car v))
                 (if (eq f (quote +))    (+ (car v) (car (cdr v)))
                 (if (eq f (quote -))    (- (car v) (car (cdr v)))
                 (if (eq f (quote *))    (* (car v) (car (cdr v)))
                 (if (eq f (quote /))    (/ (car v) (car (cdr v)))
                 (if (eq f (quote %))    (% (car v) (car (cdr v)))
                 (if (eq f (quote lt))   (lt (car v) (car (cdr v)))
                     nil)))))))))))
             (if (eq (car f) (quote lambda))
                 ((u u)
                   (car (cdr (cdr f)))
                   (append ((lambda (lvars)
                                 (if (atom lvars)
                                     ((lambda x x) (cons lvars v))
                                     (map cons lvars v)))
                               (car (cdr f)))
                              (car (cdr (cdr (cdr f)))))
                   append map)
                 nil)))
           ((u u) (car e) a append map)
           (map (lambda (x) ((u u) x a append map)) (cdr e))))))))))
 (quote
     (((lambda (u) (u u))
       (lambda (u)
         (lambda (x r)
           (if (eq x (quote 0)) r
               (if (eq (% x (quote 15)) (quote 0))
                   ((u u) (- x (quote 1)) (cons (quote FizzBuzz) r))
               (if (eq (% x (quote 3)) (quote 0))
                   ((u u) (- x (quote 1)) (cons (quote Fizz) r))
               (if (eq (% x (quote 5)) (quote 0))
                   ((u u) (- x (quote 1)) (cons (quote Buzz) r))
                   ((u u) (- x (quote 1)) (cons x r)))))))))
      (quote 50) nil)
 ) nil)

