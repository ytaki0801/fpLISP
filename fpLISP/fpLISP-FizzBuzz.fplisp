((lambda (fold eval e)
   (eval e
     (quote ((cons . cons) (car . car) (cdr . cdr) (eq . eq) (atom . atom)
             (+ . +) (- . -) (* . *) (/ . /) (% . %) (lt . lt)
             (t . t) (nil . nil)))
     fold))
 ((lambda (u) (u u)) (lambda (u)
    (lambda fv
     ((lambda (f i a b)
        (if (eq a nil) i
        (if (eq b nil) (f (car a) ((u u) f i (cdr a)))
                       (f (car a) (car (car b))
                          ((u u) f i (cdr a) (cdr (car b)))))))
      (car fv) (car (cdr fv)) (car (cdr (cdr fv))) (cdr (cdr (cdr fv)))))))
 ((lambda (u) (u u)) (lambda (u)
    (lambda (e a fold)
      (if (atom e)
          (((lambda (u) (u u)) (lambda (u)
              (lambda (v)
                (if (eq v nil) nil
                (if (eq e (car (car v))) (cdr (car v)) ((u u) (cdr v))))))) a)
      (if (eq (car e) (quote quote)) (car (cdr e))
      (if (eq (car e) (quote if))
          (if ((u u) (car (cdr e)) a fold)
              ((u u) (car (cdr (cdr e))) a fold)
              ((u u) (car (cdr (cdr (cdr e)))) a fold))
      (if (eq (car e) (quote lambda)) (fold cons ((lambda x x) a) e)
          ((lambda (f v)
             (if (atom f)
                 (if (eq f (quote cons)) (cons (car v) (car (cdr v)))
                 (if (eq f (quote car))  (car (car v))
                 (if (eq f (quote cdr))  (cdr (car v))
                 (if (eq f (quote eq))   (eq (car v) (car (cdr v)))
                 (if (eq f (quote atom)) (atom (car v))
                 (if (eq f (quote +))    (+ (car v) (car (cdr v)))
                 (if (eq f (quote -))    (- (car v) (car (cdr v)))
                 (if (eq f (quote *))    (* (car v) (car (cdr v)))
                 (if (eq f (quote /))    (/ (car v) (car (cdr v)))
                 (if (eq f (quote %))    (% (car v) (car (cdr v)))
                 (if (eq f (quote lt))   (lt (car v) (car (cdr v)))
                     nil)))))))))))
             (if (eq (car f) (quote lambda))
                 ((u u) (car (cdr (cdr f)))
                        (fold cons (car (cdr (cdr (cdr f))))
                             ((lambda (lvars)
                                (if (atom lvars) ((lambda x x) (cons lvars v))
                                    (fold (lambda (x y r) (cons (cons x y) r))
                                          nil lvars v)))
                          (car (cdr f)))) fold) nil)))
           ((u u) (car e) a fold)
           (fold (lambda (x r) (cons ((u u) x a fold) r)) nil (cdr e))))))))))
 (quote
     (((lambda (u) (u u))
       (lambda (u)
         (lambda (x r)
           (if (eq x (quote 0)) r
               (if (eq (% x (quote 15)) (quote 0))
                   ((u u) (- x (quote 1)) (cons (quote FizzBuzz) r))
               (if (eq (% x (quote 3)) (quote 0))
                   ((u u) (- x (quote 1)) (cons (quote Fizz) r))
               (if (eq (% x (quote 5)) (quote 0))
                   ((u u) (- x (quote 1)) (cons (quote Buzz) r))
                   ((u u) (- x (quote 1)) (cons x r)))))))))
      (quote 50) nil)
 ))

